{% set name = "time-machine" %}
{% set alt_name = name.replace('-', '_') %}
{% set version = "2.13.0" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ alt_name }}-{{ version }}.tar.gz
    sha256: c23b2408e3adcedec84ea1131e238f0124a5bc0e491f60d1137ad7239b37c01a
  - folder: src
    url: https://github.com/adamchainz/{{ name }}/archive/refs/tags/{{ version }}.tar.gz
    sha256: a0892ada963bd16fdaf657d71ef9bec614931c467a935f3217bf08906fe3bd11

build:
  skip: true  # [py<38]
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - {{ compiler('c') }}
  host:
    - pip
    - python
  run:
    - python
    - python-dateutil

test:
  source_files:
    - src/tests
  imports:
    - time_machine
  commands:
    - pip check
    # can't test on windows due to use of ``time.tzset``
    - pytest src/tests -vv  # [not win]
  requires:
    - backports.zoneinfo
    - pip

about:
  home: https://github.com/adamchainz/time-machine
  summary: Travel through time in your tests.
  description: |
    time-machine is intended to combine the advantages of freezegun and libfaketime. It works without LD_PRELOAD but
    still mocks the standard library functions everywhere they may be referenced. It does so by modifying the built-in
    functions at the C level, to point them through wrappers that return different values when mocking. Normally in
    Python, built-in functions are immutable, but time-machine overcomes this by using C code to replace their function
    pointers.
  license: MIT
  license_file: LICENSE
  license_family: MIT
  doc_url: https://adamj.eu/tech/2020/06/03/introducing-time-machine/
  dev_url: https://github.com/adamchainz/time-machine

extra:
  recipe-maintainers:
    - bollwyvl
